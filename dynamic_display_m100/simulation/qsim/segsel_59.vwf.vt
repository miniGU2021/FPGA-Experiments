// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2021 11:11:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    segsel_59
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module segsel_59_vlg_sample_tst(
	SEGIN_59_0,
	SEGIN_59_1,
	SEGIN_59_2,
	SEGIN_59_3,
	SEGIN_59_4,
	SEGIN_59_5,
	SEGIN_59_6,
	SEGIN_59_7,
	SEL_59,
	sampler_tx
);
input [7:0] SEGIN_59_0;
input [7:0] SEGIN_59_1;
input [7:0] SEGIN_59_2;
input [7:0] SEGIN_59_3;
input [7:0] SEGIN_59_4;
input [7:0] SEGIN_59_5;
input [7:0] SEGIN_59_6;
input [7:0] SEGIN_59_7;
input [2:0] SEL_59;
output sampler_tx;

reg sample;
time current_time;
always @(SEGIN_59_0 or SEGIN_59_1 or SEGIN_59_2 or SEGIN_59_3 or SEGIN_59_4 or SEGIN_59_5 or SEGIN_59_6 or SEGIN_59_7 or SEL_59)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module segsel_59_vlg_check_tst (
	SEGOUT_59,
	sampler_rx
);
input [7:0] SEGOUT_59;
input sampler_rx;

reg [7:0] SEGOUT_59_expected;

reg [7:0] SEGOUT_59_prev;

reg [7:0] SEGOUT_59_expected_prev;

reg [7:0] last_SEGOUT_59_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	SEGOUT_59_prev = SEGOUT_59;
end

// update expected /o prevs

always @(trigger)
begin
	SEGOUT_59_expected_prev = SEGOUT_59_expected;
end


// expected SEGOUT_59[ 7 ]
initial
begin
	SEGOUT_59_expected[7] = 1'bX;
end 
// expected SEGOUT_59[ 6 ]
initial
begin
	SEGOUT_59_expected[6] = 1'bX;
end 
// expected SEGOUT_59[ 5 ]
initial
begin
	SEGOUT_59_expected[5] = 1'bX;
end 
// expected SEGOUT_59[ 4 ]
initial
begin
	SEGOUT_59_expected[4] = 1'bX;
end 
// expected SEGOUT_59[ 3 ]
initial
begin
	SEGOUT_59_expected[3] = 1'bX;
end 
// expected SEGOUT_59[ 2 ]
initial
begin
	SEGOUT_59_expected[2] = 1'bX;
end 
// expected SEGOUT_59[ 1 ]
initial
begin
	SEGOUT_59_expected[1] = 1'bX;
end 
// expected SEGOUT_59[ 0 ]
initial
begin
	SEGOUT_59_expected[0] = 1'bX;
end 
// generate trigger
always @(SEGOUT_59_expected or SEGOUT_59)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SEGOUT_59 = %b | ",SEGOUT_59_expected_prev);
	$display("| real SEGOUT_59 = %b | ",SEGOUT_59_prev);
`endif
	if (
		( SEGOUT_59_expected_prev[0] !== 1'bx ) && ( SEGOUT_59_prev[0] !== SEGOUT_59_expected_prev[0] )
		&& ((SEGOUT_59_expected_prev[0] !== last_SEGOUT_59_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[0] = SEGOUT_59_expected_prev[0];
	end
	if (
		( SEGOUT_59_expected_prev[1] !== 1'bx ) && ( SEGOUT_59_prev[1] !== SEGOUT_59_expected_prev[1] )
		&& ((SEGOUT_59_expected_prev[1] !== last_SEGOUT_59_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[1] = SEGOUT_59_expected_prev[1];
	end
	if (
		( SEGOUT_59_expected_prev[2] !== 1'bx ) && ( SEGOUT_59_prev[2] !== SEGOUT_59_expected_prev[2] )
		&& ((SEGOUT_59_expected_prev[2] !== last_SEGOUT_59_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[2] = SEGOUT_59_expected_prev[2];
	end
	if (
		( SEGOUT_59_expected_prev[3] !== 1'bx ) && ( SEGOUT_59_prev[3] !== SEGOUT_59_expected_prev[3] )
		&& ((SEGOUT_59_expected_prev[3] !== last_SEGOUT_59_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[3] = SEGOUT_59_expected_prev[3];
	end
	if (
		( SEGOUT_59_expected_prev[4] !== 1'bx ) && ( SEGOUT_59_prev[4] !== SEGOUT_59_expected_prev[4] )
		&& ((SEGOUT_59_expected_prev[4] !== last_SEGOUT_59_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[4] = SEGOUT_59_expected_prev[4];
	end
	if (
		( SEGOUT_59_expected_prev[5] !== 1'bx ) && ( SEGOUT_59_prev[5] !== SEGOUT_59_expected_prev[5] )
		&& ((SEGOUT_59_expected_prev[5] !== last_SEGOUT_59_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[5] = SEGOUT_59_expected_prev[5];
	end
	if (
		( SEGOUT_59_expected_prev[6] !== 1'bx ) && ( SEGOUT_59_prev[6] !== SEGOUT_59_expected_prev[6] )
		&& ((SEGOUT_59_expected_prev[6] !== last_SEGOUT_59_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[6] = SEGOUT_59_expected_prev[6];
	end
	if (
		( SEGOUT_59_expected_prev[7] !== 1'bx ) && ( SEGOUT_59_prev[7] !== SEGOUT_59_expected_prev[7] )
		&& ((SEGOUT_59_expected_prev[7] !== last_SEGOUT_59_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGOUT_59[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGOUT_59_expected_prev);
		$display ("     Real value = %b", SEGOUT_59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEGOUT_59_exp[7] = SEGOUT_59_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module segsel_59_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] SEGIN_59_0;
reg [7:0] SEGIN_59_1;
reg [7:0] SEGIN_59_2;
reg [7:0] SEGIN_59_3;
reg [7:0] SEGIN_59_4;
reg [7:0] SEGIN_59_5;
reg [7:0] SEGIN_59_6;
reg [7:0] SEGIN_59_7;
reg [2:0] SEL_59;
// wires                                               
wire [7:0] SEGOUT_59;

wire sampler;                             

// assign statements (if any)                          
segsel_59 i1 (
// port map - connection between master ports and signals/registers   
	.SEGIN_59_0(SEGIN_59_0),
	.SEGIN_59_1(SEGIN_59_1),
	.SEGIN_59_2(SEGIN_59_2),
	.SEGIN_59_3(SEGIN_59_3),
	.SEGIN_59_4(SEGIN_59_4),
	.SEGIN_59_5(SEGIN_59_5),
	.SEGIN_59_6(SEGIN_59_6),
	.SEGIN_59_7(SEGIN_59_7),
	.SEGOUT_59(SEGOUT_59),
	.SEL_59(SEL_59)
);
// SEL_59[ 2 ]
initial
begin
	SEL_59[2] = 1'b0;
	SEL_59[2] = #400000 1'b1;
	SEL_59[2] = #400000 1'b0;
end 
// SEL_59[ 1 ]
initial
begin
	repeat(2)
	begin
		SEL_59[1] = 1'b0;
		SEL_59[1] = #200000 1'b1;
		# 200000;
	end
	SEL_59[1] = 1'b0;
end 
// SEL_59[ 0 ]
always
begin
	SEL_59[0] = 1'b0;
	SEL_59[0] = #100000 1'b1;
	#100000;
end 
// SEGIN_59_4[ 7 ]
initial
begin
	SEGIN_59_4[7] = 1'b0;
end 
// SEGIN_59_4[ 6 ]
initial
begin
	SEGIN_59_4[6] = 1'b0;
end 
// SEGIN_59_4[ 5 ]
initial
begin
	SEGIN_59_4[5] = 1'b0;
end 
// SEGIN_59_4[ 4 ]
initial
begin
	SEGIN_59_4[4] = 1'b0;
end 
// SEGIN_59_4[ 3 ]
initial
begin
	SEGIN_59_4[3] = 1'b1;
end 
// SEGIN_59_4[ 2 ]
initial
begin
	SEGIN_59_4[2] = 1'b0;
end 
// SEGIN_59_4[ 1 ]
initial
begin
	SEGIN_59_4[1] = 1'b0;
end 
// SEGIN_59_4[ 0 ]
initial
begin
	SEGIN_59_4[0] = 1'b0;
end 
// SEGIN_59_5[ 7 ]
initial
begin
	SEGIN_59_5[7] = 1'b0;
end 
// SEGIN_59_5[ 6 ]
initial
begin
	SEGIN_59_5[6] = 1'b0;
end 
// SEGIN_59_5[ 5 ]
initial
begin
	SEGIN_59_5[5] = 1'b0;
end 
// SEGIN_59_5[ 4 ]
initial
begin
	SEGIN_59_5[4] = 1'b0;
end 
// SEGIN_59_5[ 3 ]
initial
begin
	SEGIN_59_5[3] = 1'b0;
end 
// SEGIN_59_5[ 2 ]
initial
begin
	SEGIN_59_5[2] = 1'b1;
end 
// SEGIN_59_5[ 1 ]
initial
begin
	SEGIN_59_5[1] = 1'b0;
end 
// SEGIN_59_5[ 0 ]
initial
begin
	SEGIN_59_5[0] = 1'b0;
end 
// SEGIN_59_6[ 7 ]
initial
begin
	SEGIN_59_6[7] = 1'b0;
end 
// SEGIN_59_6[ 6 ]
initial
begin
	SEGIN_59_6[6] = 1'b0;
end 
// SEGIN_59_6[ 5 ]
initial
begin
	SEGIN_59_6[5] = 1'b0;
end 
// SEGIN_59_6[ 4 ]
initial
begin
	SEGIN_59_6[4] = 1'b0;
end 
// SEGIN_59_6[ 3 ]
initial
begin
	SEGIN_59_6[3] = 1'b0;
end 
// SEGIN_59_6[ 2 ]
initial
begin
	SEGIN_59_6[2] = 1'b0;
end 
// SEGIN_59_6[ 1 ]
initial
begin
	SEGIN_59_6[1] = 1'b1;
end 
// SEGIN_59_6[ 0 ]
initial
begin
	SEGIN_59_6[0] = 1'b0;
end 
// SEGIN_59_7[ 7 ]
initial
begin
	SEGIN_59_7[7] = 1'b0;
end 
// SEGIN_59_7[ 6 ]
initial
begin
	SEGIN_59_7[6] = 1'b0;
end 
// SEGIN_59_7[ 5 ]
initial
begin
	SEGIN_59_7[5] = 1'b0;
end 
// SEGIN_59_7[ 4 ]
initial
begin
	SEGIN_59_7[4] = 1'b0;
end 
// SEGIN_59_7[ 3 ]
initial
begin
	SEGIN_59_7[3] = 1'b0;
end 
// SEGIN_59_7[ 2 ]
initial
begin
	SEGIN_59_7[2] = 1'b0;
end 
// SEGIN_59_7[ 1 ]
initial
begin
	SEGIN_59_7[1] = 1'b0;
end 
// SEGIN_59_7[ 0 ]
initial
begin
	SEGIN_59_7[0] = 1'b1;
end 

segsel_59_vlg_sample_tst tb_sample (
	.SEGIN_59_0(SEGIN_59_0),
	.SEGIN_59_1(SEGIN_59_1),
	.SEGIN_59_2(SEGIN_59_2),
	.SEGIN_59_3(SEGIN_59_3),
	.SEGIN_59_4(SEGIN_59_4),
	.SEGIN_59_5(SEGIN_59_5),
	.SEGIN_59_6(SEGIN_59_6),
	.SEGIN_59_7(SEGIN_59_7),
	.SEL_59(SEL_59),
	.sampler_tx(sampler)
);

segsel_59_vlg_check_tst tb_out(
	.SEGOUT_59(SEGOUT_59),
	.sampler_rx(sampler)
);
endmodule

