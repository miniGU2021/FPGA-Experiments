// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2021 01:22:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fre_div_59
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fre_div_59_vlg_sample_tst(
	CI,
	TI,
	sampler_tx
);
input  CI;
input  TI;
output sampler_tx;

reg sample;
time current_time;
always @(CI or TI)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fre_div_59_vlg_check_tst (
	CO1,
	CO2,
	CO3,
	sampler_rx
);
input  CO1;
input  CO2;
input  CO3;
input sampler_rx;

reg  CO1_expected;
reg  CO2_expected;
reg  CO3_expected;

reg  CO1_prev;
reg  CO2_prev;
reg  CO3_prev;

reg  CO1_expected_prev;
reg  CO2_expected_prev;
reg  CO3_expected_prev;

reg  last_CO1_exp;
reg  last_CO2_exp;
reg  last_CO3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	CO1_prev = CO1;
	CO2_prev = CO2;
	CO3_prev = CO3;
end

// update expected /o prevs

always @(trigger)
begin
	CO1_expected_prev = CO1_expected;
	CO2_expected_prev = CO2_expected;
	CO3_expected_prev = CO3_expected;
end



// expected CO1
initial
begin
	CO1_expected = 1'bX;
end 

// expected CO2
initial
begin
	CO2_expected = 1'bX;
end 

// expected CO3
initial
begin
	CO3_expected = 1'bX;
end 
// generate trigger
always @(CO1_expected or CO1 or CO2_expected or CO2 or CO3_expected or CO3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CO1 = %b | expected CO2 = %b | expected CO3 = %b | ",CO1_expected_prev,CO2_expected_prev,CO3_expected_prev);
	$display("| real CO1 = %b | real CO2 = %b | real CO3 = %b | ",CO1_prev,CO2_prev,CO3_prev);
`endif
	if (
		( CO1_expected_prev !== 1'bx ) && ( CO1_prev !== CO1_expected_prev )
		&& ((CO1_expected_prev !== last_CO1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO1_expected_prev);
		$display ("     Real value = %b", CO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CO1_exp = CO1_expected_prev;
	end
	if (
		( CO2_expected_prev !== 1'bx ) && ( CO2_prev !== CO2_expected_prev )
		&& ((CO2_expected_prev !== last_CO2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO2_expected_prev);
		$display ("     Real value = %b", CO2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CO2_exp = CO2_expected_prev;
	end
	if (
		( CO3_expected_prev !== 1'bx ) && ( CO3_prev !== CO3_expected_prev )
		&& ((CO3_expected_prev !== last_CO3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO3_expected_prev);
		$display ("     Real value = %b", CO3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CO3_exp = CO3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fre_div_59_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CI;
reg TI;
// wires                                               
wire CO1;
wire CO2;
wire CO3;

wire sampler;                             

// assign statements (if any)                          
fre_div_59 i1 (
// port map - connection between master ports and signals/registers   
	.CI(CI),
	.CO1(CO1),
	.CO2(CO2),
	.CO3(CO3),
	.TI(TI)
);

// TI
always
begin
	TI = 1'b0;
	TI = #5000 1'b1;
	#5000;
end 

fre_div_59_vlg_sample_tst tb_sample (
	.CI(CI),
	.TI(TI),
	.sampler_tx(sampler)
);

fre_div_59_vlg_check_tst tb_out(
	.CO1(CO1),
	.CO2(CO2),
	.CO3(CO3),
	.sampler_rx(sampler)
);
endmodule

